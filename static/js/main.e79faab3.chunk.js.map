{"version":3,"sources":["components/ArrowButton.tsx","components/BeltGear.tsx","components/BeltLength.tsx","components/BottomLeft.tsx","components/BottomRIght.tsx","components/BottomHalfBelt.tsx","components/TopLeft.tsx","components/TopRight.tsx","components/TopHalfBelt.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ArrowButton","text","onClick","BeltGear","children","color","marginLeft","marginTop","rotation","size","css","display","flexDirection","justifyContent","position","width","height","borderRadius","backgroundColor","transform","BeltLength","length","BottomLeft","beltColors","beltWidth","offset","showInfo","scale","boxSizing","x","borderLeft","paddingLeft","y","opacity","zIndex","borderTop","borderTopLeftRadius","marginBottom","textAlign","BottomRight","borderRight","flexGrow","paddingRight","borderTopRightRadius","marginRight","BottomHalfBelt","backgroundColors","gearWidth","Motor","beltColor","gearColor","motorSize","TopLeft","borderBottom","borderBottomLeftRadius","TopRight","borderBottomRightRadius","TopHalfBelt","backgroundColorsColorful","backgroundColorsBlank","App","useState","leftMotorPosition","rightMotorPosition","setMotorPositions","setbackgroundColors","setShowInfo","centerPointOffset","useMemo","Math","round","incrementLeft","setMotors","prev","decrementRight","decrementLeft","callback","newVal","abs","rotationLimit","moveTo","useCallback","left","right","roundedLeft","roundedRight","leftDiff","rightDiff","rotationAmount","max","leftMoveAmount","rightMoveAmount","i","window","setTimeout","alignItems","minHeight","onDragOver","e","preventDefault","cursor","event","newX","nativeEvent","offsetX","newY","offsetY","border","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAEO,SAASA,EAAT,GAMF,IALHC,EAKE,EALFA,KACAC,EAIE,EAJFA,QAKA,OAAO,sBAAQA,QAASA,EAAjB,SAA2BD,ICL7B,SAASE,EAAT,GAAiH,IAA7FC,EAA4F,EAA5FA,SAAUC,EAAkF,EAAlFA,MAAOC,EAA2E,EAA3EA,WAAYC,EAA+D,EAA/DA,UAAWC,EAAoD,EAApDA,SAAUC,EAA0C,EAA1CA,KAC3E,OACE,mBACEC,IAAK,CACHC,QAAS,OACTC,cAAe,SACfC,eAAgB,eAChBR,MAAO,QACPS,SAAU,WACVC,MAAON,EACPO,OAAQP,EACRQ,aAAc,MACdC,gBAAiBb,GAAS,QAC1BC,aACAC,YACAY,UAAU,UAAD,OAAYX,EAAZ,SAbb,SAgBGJ,ICpBA,SAASgB,EAAT,GAA+D,IAAzCC,EAAwC,EAAxCA,OAC3B,OACE,oBACEX,IAAK,CACHQ,gBAAiB,cAFrB,SAKGG,ICLA,SAASC,EAAT,GAA0G,IAApFJ,EAAmF,EAAnFA,gBAAiBK,EAAkE,EAAlEA,WAAYC,EAAsD,EAAtDA,UAAWC,EAA2C,EAA3CA,OAAeC,GAA4B,EAAnCC,MAAmC,EAA5BD,UAClF,OACE,mBACEhB,IAAK,CACHkB,UAAW,aACXZ,OAAQ,OACRD,MAAOU,EAAOI,EACdC,WAAW,GAAD,OAAKN,EAAL,oBAA0BD,EAAW,IAC/CQ,YAAaP,GANjB,UASE,mBACEd,IAAK,CACHI,SAAU,WACVE,OAAQ,IAAMS,EAAOO,EACrBd,kBACAe,QAAS,IACTC,QAAS,EACT5B,YAAakB,EACbT,MAAOU,EAAOI,EAAIL,KAGtB,mBACEd,IAAK,CACHkB,UAAW,aACXZ,OAAQ,OACRD,MAAO,OACPoB,UAAU,GAAD,OAAKX,EAAL,oBAA0BD,EAAW,IAC9CO,WAAW,GAAD,OAAKN,EAAL,oBAA0BD,EAAW,IAC/Ca,oBAAiC,KAAZZ,GAPzB,UAUGE,GACC,mBACEhB,IAAK,CACHM,OAAQ,MACRD,MAAO,OACPJ,QAAS,OACTC,cAAe,SACfC,eAAgB,gBANpB,SASE,mBACEH,IAAK,CACH2B,aAAc,OACd9B,UAAW,GAHf,SAME,YAACa,EAAD,CAAYC,OAAQI,EAAOI,QAIhCH,GACC,mBACEhB,IAAK,CACHM,OAAQ,MACRD,MAAO,OACPJ,QAAS,OACTC,cAAe,SACfC,eAAgB,gBANpB,SASE,mBACEH,IAAK,CACH4B,UAAW,OACXD,aAAc,OACd/B,WAAY,GAJhB,SAOE,YAACc,EAAD,CAAYC,OAAQ,IAAMI,EAAOO,cCrExC,SAASO,EAAT,GAA2G,IAApFrB,EAAmF,EAAnFA,gBAAiBK,EAAkE,EAAlEA,WAAYC,EAAsD,EAAtDA,UAAWC,EAA2C,EAA3CA,OAAQE,EAAmC,EAAnCA,MAAOD,EAA4B,EAA5BA,SACnF,OACE,mBACEhB,IAAK,CACHkB,UAAW,aACXZ,OAAQ,OACRwB,YAAY,GAAD,OAAKhB,EAAL,oBAA0BD,EAAW,IAChDkB,SAAU,EACVC,aAAclB,GANlB,UASE,mBACEd,IAAK,CACHI,SAAU,WACVE,OAAQ,IAAMS,EAAOO,EACrBd,kBACAe,QAAS,IACTC,QAAS,EACTnB,MAAO,IAAMU,EAAOI,EAAIL,KAG5B,mBACEd,IAAK,CACHkB,UAAW,aACXZ,OAAQ,OACRD,MAAO,OACPoB,UAAU,GAAD,OAAKX,EAAL,oBAA0BD,EAAW,IAC9CiB,YAAY,GAAD,OAAKhB,EAAL,oBAA0BD,EAAW,IAChDoB,qBAAkC,KAAZnB,GAP1B,UAUGE,GACC,mBACEhB,IAAK,CACHM,OAAQ,MACRD,MAAO,OACPJ,QAAS,OACTC,cAAe,SACfC,eAAgB,gBANpB,SASE,mBACEH,IAAK,CACH2B,aAAc,OACd9B,UAAW,GAHf,SAME,YAACa,EAAD,CAAYC,OAAQM,EAAQF,EAAOI,QAIxCH,GACC,mBACEhB,IAAK,CACHM,OAAQ,MACRD,MAAO,OACPJ,QAAS,OACTC,cAAe,SACfC,eAAgB,gBANpB,SASE,mBACEH,IAAK,CACH4B,UAAW,QACXD,aAAc,OACdO,YAAa,GAJjB,SAOE,YAACxB,EAAD,CAAYC,OAAQ,IAAMI,EAAOO,cChExC,SAASa,EAAT,GAQiB,IAPtBC,EAOqB,EAPrBA,iBACAtB,EAMqB,EANrBA,UACAuB,EAKqB,EALrBA,UACAxB,EAIqB,EAJrBA,WACAE,EAGqB,EAHrBA,OACAE,EAEqB,EAFrBA,MACAD,EACqB,EADrBA,SAEA,OACE,0BACE,mBACEhB,IAAK,CACHC,QAAS,OACT8B,SAAU,GAHd,UAME,YAACtC,EAAD,CAAUM,KAAMsC,EAAWzC,WAAwB,EAAZkB,IACvC,YAACrB,EAAD,CAAUM,KAAMsC,EAAWzC,WAAYqB,EAAQoB,EAAwB,EAAZvB,IAC3D,YAACwB,EAAD,CACEC,UAAW1B,EAAW,GACtBC,UAAWA,EACX0B,UAAW,QACX5C,YAAakB,EACbC,OAAQA,EACRjB,SAAU,KAAOiB,EAAOO,EAAIP,EAAOI,GACnCF,MAAOA,IAET,YAACqB,EAAD,CACEC,UAAW1B,EAAW,GACtBC,UAAWA,EACX0B,UAAW,QACX5C,WAAYqB,EAAoB,EAAZH,EACpBC,OAAQA,EACRjB,SAAU,KAAOmB,EAAQF,EAAOI,EAAIJ,EAAOO,GAC3CL,MAAOA,IAET,YAACL,EAAD,CACEJ,gBAAiB4B,EAAiB,GAClCvB,WAAYA,EACZC,UAAWA,EACXC,OAAQA,EACRE,MAAOA,EACPD,SAAUA,IAEZ,YAACa,EAAD,CACErB,gBAAiB4B,EAAiB,GAClCvB,WAAYA,EACZC,UAAWA,EACXC,OAAQA,EACRC,SAAUA,EACVC,MAAOA,SAOjB,SAASqB,EAAT,GAS6F,IAR3FC,EAQ0F,EAR1FA,UACAzB,EAO0F,EAP1FA,UACA0B,EAM0F,EAN1FA,UACA5C,EAK0F,EAL1FA,WACAmB,EAI0F,EAJ1FA,OACAjB,EAG0F,EAH1FA,SACAmB,EAE0F,EAF1FA,MAGMwB,EAAwB,EAAZ3B,EAClB,OACE,mBACEd,IAAK,CACHkB,UAAW,aACXG,YAAaP,EACbkB,aAAclB,EACdV,SAAU,WACVC,MAAOoC,EACPnC,OAAQmC,EACRlC,aAAc,MACdC,gBAAiB,OACjBZ,aACAC,UAAWoB,EAAQF,EAAOO,EAAgB,IAAZmB,GAXlC,UAcE,YAAChD,EAAD,CAAUE,MAAO6C,EAAWzC,KAAkB,EAAZe,EAAejB,UAAWiB,EAAWhB,SAAUA,EAAjF,oBAGA,mBACEE,IAAK,CACHM,OAAQmC,EAAY,EACpBrB,WAAW,GAAD,OAAKN,EAAL,oBAA0ByB,GACpCT,YAAY,GAAD,OAAKhB,EAAL,oBAA0ByB,SC/FxC,SAASG,EAAT,GAAgG,IAA7ElC,EAA4E,EAA5EA,gBAAiBK,EAA2D,EAA3DA,WAAYC,EAA+C,EAA/CA,UAAWC,EAAoC,EAApCA,OAAQC,EAA4B,EAA5BA,SACxE,OACE,mBACEhB,IAAK,CACHkB,UAAW,aACXE,WAAW,GAAD,OAAKN,EAAL,oBAA0BD,EAAW,IAC/Ca,oBAAiC,KAAZZ,EACrBR,OAAQS,EAAOO,EACfjB,MAAOU,EAAOI,GANlB,UASE,mBACEnB,IAAK,CACHI,SAAU,WACVE,OAAQS,EAAOO,EACfd,kBACAe,QAAS,IACTC,QAAS,EACTnB,MAAOU,EAAOI,EAAIL,KAGtB,mBACEd,IAAK,CACHkB,UAAW,aACXZ,OAAQ,OACRD,MAAO,OACPsC,aAAa,GAAD,OAAK7B,EAAL,oBAA0BD,EAAW,IACjDO,WAAW,GAAD,OAAKN,EAAL,oBAA0BD,EAAW,IAC/Ca,oBAAiC,KAAZZ,EACrB8B,uBAAoC,KAAZ9B,GAR5B,UAWGE,GACC,mBACEhB,IAAK,CACHM,OAAQ,MACRD,MAAO,OACPJ,QAAS,OACTC,cAAe,SACfC,eAAgB,gBANpB,SASE,mBACEH,IAAK,CACHH,UAAW,OACX+B,UAAW,OACXhC,WAAY,GAJhB,SAOE,YAACc,EAAD,CAAYC,OAAQI,EAAOO,QAIhCN,GACC,mBACEhB,IAAK,CACHM,OAAQ,MACRD,MAAO,OACPJ,QAAS,OACTC,cAAe,SACfC,eAAgB,gBANpB,SASE,mBACEH,IAAK,CACHH,UAAW,OACX8B,aAAc,GAHlB,SAME,YAACjB,EAAD,CAAYC,OAAQI,EAAOI,cCpElC,SAAS0B,EAAT,GAAwG,IAApFrC,EAAmF,EAAnFA,gBAAiBK,EAAkE,EAAlEA,WAAYC,EAAsD,EAAtDA,UAAWC,EAA2C,EAA3CA,OAAQE,EAAmC,EAAnCA,MAAOD,EAA4B,EAA5BA,SAChF,OACE,mBACEhB,IAAK,CACHkB,UAAW,aACXY,YAAY,GAAD,OAAKhB,EAAL,oBAA0BD,EAAW,IAChDoB,qBAAkC,KAAZnB,EACtBR,OAAQ,OACRyB,SAAU,GANd,UASE,mBACE/B,IAAK,CACHI,SAAU,WACVE,OAAQS,EAAOO,EACfd,kBACAe,QAAS,IACTC,QAAS,EACTnB,MAAO,IAAMU,EAAOI,EAAIL,KAG5B,mBACEd,IAAK,CACHkB,UAAW,aACXZ,OAAQ,OACRD,MAAO,OACPsC,aAAa,GAAD,OAAK7B,EAAL,oBAA0BD,EAAW,IACjDiB,YAAY,GAAD,OAAKhB,EAAL,oBAA0BD,EAAW,IAChDoB,qBAAkC,KAAZnB,EACtBgC,wBAAqC,KAAZhC,GAR7B,UAWGE,GACC,mBACEhB,IAAK,CACHM,OAAQ,MACRD,MAAO,OACPJ,QAAS,OACTC,cAAe,SACfC,eAAgB,gBANpB,SASE,mBACEH,IAAK,CACHH,UAAW,OACX+B,UAAW,QACXM,YAAa,GAJjB,SAOE,YAACxB,EAAD,CAAYC,OAAQI,EAAOO,QAIhCN,GACC,mBACEhB,IAAK,CACHM,OAAQ,MACRD,MAAO,OACPJ,QAAS,OACTC,cAAe,SACfC,eAAgB,gBANpB,SASE,mBACEH,IAAK,CACHH,UAAW,OACX8B,aAAc,GAHlB,SAME,YAACjB,EAAD,CAAYC,OAAQM,EAAQF,EAAOI,cCnE1C,SAAS4B,EAAT,GAQiB,IAPtBX,EAOqB,EAPrBA,iBACAtB,EAMqB,EANrBA,UACAuB,EAKqB,EALrBA,UACAxB,EAIqB,EAJrBA,WACAE,EAGqB,EAHrBA,OACAE,EAEqB,EAFrBA,MACAD,EACqB,EADrBA,SAEA,OACE,2BACE,mBACEhB,IAAK,CACHI,SAAU,WACViB,YAAa,IAHjB,UAME,mBACErB,IAAK,CACHH,UAAW,EACXO,SAAU,WACVC,MAAOY,EAAQ,GACfQ,UAAU,GAAD,OAAKX,EAAL,oBAA0BD,EAAW,IAC9CJ,UAAW,kBAGf,mBACET,IAAK,CACHH,UAAW,EACXO,SAAU,WACVC,MAAOY,EAAQ,GACfQ,UAAU,GAAD,OAAKX,EAAL,oBAA0BD,EAAW,IAC9CJ,UAAW,sBAIjB,YAAChB,EAAD,CAAUM,KAAMsC,IAChB,YAAC5C,EAAD,CAAUM,KAAMsC,EAAWzC,WAAYqB,EAAQoB,IAC/C,YAAC5C,EAAD,CAAUM,KAAMsC,EAAWzC,WAAYkB,EAAWjB,UAAWkB,EAAOO,EAAIe,IACxE,YAAC5C,EAAD,CAAUM,KAAMsC,EAAWzC,WAAYqB,EAAQoB,EAAYvB,EAAWjB,UAAWkB,EAAOO,EAAIe,IAC5F,mBACErC,IAAK,CACHC,QAAS,QAFb,UAKE,YAACyC,EAAD,CACElC,gBAAiB4B,EAAiB,GAClCvB,WAAYA,EACZC,UAAWA,EACXC,OAAQA,EACRE,MAAOA,EACPD,SAAUA,IAEZ,YAAC6B,EAAD,CACErC,gBAAiB4B,EAAiB,GAClCvB,WAAYA,EACZC,UAAWA,EACXC,OAAQA,EACRE,MAAOA,EACPD,SAAUA,UC3DpB,IAAMC,EAAQ,IAMRJ,EAAa,CAAC,OAAQ,OACtBmC,EAA2B,CAAC,UAAW,UAAW,YAAa,eAC/DC,EAAwB,CAAC,OAAQ,OAAQ,OAAQ,QA4UxCC,MA1Uf,WACE,MAAuEC,mBAAS,CAC9EC,kBAAmB,EACnBC,mBAAoB,IAFtB,0BAASD,EAAT,EAASA,kBAAmBC,EAA5B,EAA4BA,mBAAsBC,EAAlD,KAIA,EAAgDH,mBAASF,GAAzD,mBAAOb,EAAP,KAAyBmB,EAAzB,KACA,EAAgCJ,oBAAS,GAAzC,mBAAOnC,EAAP,KAAiBwC,EAAjB,KAEMC,EAAoBC,mBACxB,iBAAO,CACLvC,EAAGwC,KAAKC,MAAM3C,IAAYmC,EAAoBC,GAC9C/B,EAAGqC,KAAKC,MAAM3C,IAAYmC,EAAoBC,MAEhD,CAACD,EAAmBC,IAShBQ,EAAgB,WACpBC,GAAU,SAACC,GAAD,mBAAC,eACNA,GADK,IAERX,kBAAmBW,EAAKX,kBAhCR,QAmCdY,EAAiB,WACrBF,GAAU,SAACC,GAAD,mBAAC,eACNA,GADK,IAERV,mBAAoBU,EAAKV,mBAtCT,QAyCdY,EAAgB,WACpBH,GAAU,SAACC,GAAD,mBAAC,eACNA,GADK,IAERX,kBAAmBW,EAAKX,kBA5CR,QAgDdU,EAAY,SAChBI,GAUAZ,GAAkB,SAACS,GACjB,IAAMI,EAASD,EAASH,GACxB,OAAOJ,KAAKS,IAAID,EAAOf,mBAAqBO,KAAKS,IAAID,EAAOd,qBA3DpDgB,IA2DmFF,EAASJ,MAIlGO,EAASC,uBACb,SAACpD,EAAWG,GAYV,IAXA,IAAMkD,GAAQlD,EAAIH,GAAK,EACjBsD,GAASxD,EAAQE,EAAIG,GAAK,EAC1BoD,EAAcF,EAAQA,EArEZ,EAsEVG,EAAeF,EAASA,EAtEd,EAwEVG,EAAWF,EAActB,EACzByB,EAAYF,EAAetB,EAE3ByB,EAAiBnB,KAAKoB,IAAIpB,KAAKS,IAAIQ,GAAWjB,KAAKS,IAAIS,IA3E7C,EA4EVG,EAAiBJ,EAAWE,EAC5BG,EAAkBJ,EAAYC,EAXZ,WAYfI,GACPC,OAAOC,YAAW,WAChBtB,GAAU,SAACC,GAAD,MAAW,CACnBX,kBAAmBW,EAAKX,kBAAoB4B,EAC5C3B,mBAAoBU,EAAKV,mBAAqB4B,MAE5CC,IAAMJ,GACRhB,GAAU,SAACC,GAAD,MAAW,CACnBX,kBAAmBsB,EACnBrB,mBAAoBsB,QAGvB,IAZIO,EAAI,EAAGA,GAAKJ,EAAgBI,IAAM,EAAlCA,KAeX,CAAC9B,EAAmBC,IAGtB,OACE,mBACErD,IAAK,CACHC,QAAS,OACTE,eAAgB,SAChBkF,WAAY,SACZzD,UAAW,SACX0D,UAAW,OACXpF,cAAe,SACfM,gBAAiB,aARrB,UAWE,mBACER,IAAK,CACHC,QAAS,OACTC,cAAe,SACfI,OAAQW,EACRZ,MAAOY,EACPT,gBAAiB,QACjBgB,OAAQ,GAEV+D,WAAY,SAACC,GACXA,EAAEC,kBAVN,UAaE,mBACEzF,IAAK,CACHI,SAAU,WACVE,OAAQW,IACRZ,MAAOY,IACPrB,WAAY,GACZC,UAAW,GACX2B,OAAQ,EACRkE,OAAQ,aAEVlG,QAAS,SAACmG,GACR,IAAMC,EAAOD,EAAME,YAAYC,QAAU,GACnCC,EAAOJ,EAAME,YAAYG,QAAU,GACzC1B,EAAOsB,EAAMG,MAGjB,mBACE/F,IAAK,CACHI,SAAU,WACVE,OAAQW,IACRZ,MAAOY,IACPrB,WAAY,GACZC,UAAW,GACXoG,OAAQ,kBACRzF,gBAAiB,SACjBgB,QAAS,KAGb,mBACExB,IAAK,CACHI,SAAU,WACVE,OAAQ,GACRD,MAAO,GACPG,gBAAiB,QACjBZ,WAAY6D,EAAkBtC,EAAI,GAClCtB,UAAW4D,EAAkBnC,EAAI,GACjCoE,OAAQ,UACRlE,OAAQ,KAGZ,YAACuB,EAAD,CACEX,iBAAkBA,EAClBtB,UArKQ,GAsKRuB,UArKQvB,GAsKRD,WAAYA,EACZE,OAAQ0C,EACRxC,MAAOA,EACPD,SAAUA,IAEZ,YAACmB,EAAD,CACEC,iBAAkBA,EAClBtB,UA9KQ,GA+KRuB,UA9KQvB,GA+KRD,WAAYA,EACZE,OAAQ0C,EACRxC,MAAOA,EACPD,SAAUA,OAGd,mBACEhB,IAAK,CACHK,MAAOY,EACPX,OAAQW,IACRT,gBAAiB,kBAJrB,UAOE,mBACER,IAAK,CACHC,QAAS,OACTE,eAAgB,iBAHpB,UAME,6BACE,4BAAKwD,KAAKC,MAA0B,EAApBR,GAAhB,UACA,YAAC9D,EAAD,CACEC,KAAK,SACLC,QAAS,WACPyE,OAGJ,YAAC3E,EAAD,CACEC,KAAK,SACLC,QAAS,WACPqE,OAGJ,oDAEF,6BACE,yCAAY5C,IAAYwC,EAAkBtC,GAA1C,eAAmDF,IAAYwC,EAAkBnC,KACjF,6BACE,YAAChC,EAAD,CACEC,KAAK,SACLC,QAAS,WA9LrBsE,GAAU,SAACC,GAAD,mBAAC,eACNA,GADK,IAERV,mBAAoBU,EAAKV,mBA1BT,UA0NR,YAAC/D,EAAD,CACEC,KAAK,SACLC,QAAS,WACPsE,GAAU,SAACC,GAAD,MAAW,CACnBX,kBAAmBW,EAAKX,kBA9NtB,EA+NFC,mBAAoBU,EAAKV,mBA/NvB,SAmOR,YAAC/D,EAAD,CACEC,KAAK,SACLC,QAAS,WACPyE,UAIN,6BACE,YAAC3E,EAAD,CACEC,KAAK,SACLC,QAAS,WACPsE,GAAU,SAACC,GAAD,MAAW,CACnBX,kBAAmBW,EAAKX,kBA/OtB,EAgPFC,mBAAoBU,EAAKV,mBAhPvB,SAoPR,YAAC/D,EAAD,CACEC,KAAK,QACLC,QAAS,WACPsE,GAAU,SAACC,GAAD,MAAW,CACnBX,kBAAmB,EACnBC,mBAAoB,SAK1B,YAAC/D,EAAD,CACEC,KAAK,SACLC,QAAS,WACPsE,GAAU,SAACC,GAAD,MAAW,CACnBX,kBAAmBW,EAAKX,kBAlQtB,EAmQFC,mBAAoBU,EAAKV,mBAnQvB,YAwQV,6BACE,YAAC/D,EAAD,CACEC,KAAK,SACLC,QAAS,WACPqE,OAGJ,YAACvE,EAAD,CACEC,KAAK,SACLC,QAAS,WACPsE,GAAU,SAACC,GAAD,MAAW,CACnBX,kBAAmBW,EAAKX,kBAnRtB,EAoRFC,mBAAoBU,EAAKV,mBApRvB,SAwRR,YAAC/D,EAAD,CACEC,KAAK,SACLC,QAAS,WACPwE,UAIN,4CAEF,6BACE,4BAAKL,KAAKC,MAA2B,EAArBP,GAAhB,UACA,YAAC/D,EAAD,CACEC,KAAK,SACLC,QAAS,WACPwE,OAGJ,YAAC1E,EAAD,CACEC,KAAK,SACLC,QAAS,WACPsE,GAAU,SAACC,GAAD,mBAAC,eACNA,GADK,IAERV,mBAAoBU,EAAKV,mBA9SrB,UAkTV,wDAGJ,6BACE,sBACE7D,QAAS,WAEL+D,EADEnB,IAAqBa,EACHD,EAEAC,IAL1B,mCAWA,sBACEzD,QAAS,WACPgE,GAAY,SAACO,GAAD,OAAWA,MAF3B,oCAQF,4BACE,mFCtUKmC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e79faab3.chunk.js","sourcesContent":["/** @jsxImportSource @emotion/react */\n\nexport function ArrowButton({\n  text,\n  onClick,\n}: Readonly<{\n  text: string;\n  onClick(): void;\n}>) {\n  return <button onClick={onClick}>{text}</button>;\n}\n","/** @jsxImportSource @emotion/react */\n\nimport { PropsWithChildren } from 'react';\n\nexport function BeltGear({ children, color, marginLeft, marginTop, rotation, size }: PropsWithChildren<BeltGearProps>) {\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-around',\n        color: 'white',\n        position: 'absolute',\n        width: size,\n        height: size,\n        borderRadius: '50%',\n        backgroundColor: color || 'brown',\n        marginLeft,\n        marginTop,\n        transform: `rotate(${rotation}deg)`,\n      }}\n    >\n      {children}\n    </div>\n  );\n}\n\ninterface BeltGearProps\n  extends Readonly<{\n    color?: string;\n    marginLeft?: number;\n    marginTop?: number;\n    rotation?: number;\n    size: number;\n  }> {}\n","/** @jsxImportSource @emotion/react */\n\nexport function BeltLength({ length }: Readonly<{ length: number }>) {\n  return (\n    <span\n      css={{\n        backgroundColor: 'lightgreen',\n      }}\n    >\n      {length}\n    </span>\n  );\n}\n","/** @jsxImportSource @emotion/react */\nimport { ContainerProps } from '../Props';\nimport { BeltLength } from './BeltLength';\n\nexport function BottomLeft({ backgroundColor, beltColors, beltWidth, offset, scale, showInfo }: ContainerProps) {\n  return (\n    <div\n      css={{\n        boxSizing: 'border-box',\n        height: '100%',\n        width: offset.x,\n        borderLeft: `${beltWidth}px solid ${beltColors[0]}`,\n        paddingLeft: beltWidth,\n      }}\n    >\n      <div\n        css={{\n          position: 'absolute',\n          height: 500 - offset.y,\n          backgroundColor,\n          opacity: 0.75,\n          zIndex: -1,\n          marginLeft: -beltWidth,\n          width: offset.x - beltWidth,\n        }}\n      />\n      <div\n        css={{\n          boxSizing: 'border-box',\n          height: '100%',\n          width: '100%',\n          borderTop: `${beltWidth}px solid ${beltColors[0]}`,\n          borderLeft: `${beltWidth}px solid ${beltColors[0]}`,\n          borderTopLeftRadius: beltWidth * 1.25,\n        }}\n      >\n        {showInfo && (\n          <div\n            css={{\n              height: '45%',\n              width: '100%',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'space-around',\n            }}\n          >\n            <div\n              css={{\n                marginBottom: 'auto',\n                marginTop: 5,\n              }}\n            >\n              <BeltLength length={offset.x} />\n            </div>\n          </div>\n        )}\n        {showInfo && (\n          <div\n            css={{\n              height: '55%',\n              width: '100%',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'space-around',\n            }}\n          >\n            <div\n              css={{\n                textAlign: 'left',\n                marginBottom: 'auto',\n                marginLeft: 5,\n              }}\n            >\n              <BeltLength length={500 - offset.y} />\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","/** @jsxImportSource @emotion/react */\nimport { ContainerProps } from '../Props';\nimport { BeltLength } from './BeltLength';\n\nexport function BottomRight({ backgroundColor, beltColors, beltWidth, offset, scale, showInfo }: ContainerProps) {\n  return (\n    <div\n      css={{\n        boxSizing: 'border-box',\n        height: '100%',\n        borderRight: `${beltWidth}px solid ${beltColors[1]}`,\n        flexGrow: 1,\n        paddingRight: beltWidth,\n      }}\n    >\n      <div\n        css={{\n          position: 'absolute',\n          height: 500 - offset.y,\n          backgroundColor,\n          opacity: 0.75,\n          zIndex: -1,\n          width: 500 - offset.x - beltWidth,\n        }}\n      />\n      <div\n        css={{\n          boxSizing: 'border-box',\n          height: '100%',\n          width: '100%',\n          borderTop: `${beltWidth}px solid ${beltColors[1]}`,\n          borderRight: `${beltWidth}px solid ${beltColors[1]}`,\n          borderTopRightRadius: beltWidth * 1.25,\n        }}\n      >\n        {showInfo && (\n          <div\n            css={{\n              height: '45%',\n              width: '100%',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'space-around',\n            }}\n          >\n            <div\n              css={{\n                marginBottom: 'auto',\n                marginTop: 5,\n              }}\n            >\n              <BeltLength length={scale - offset.x} />\n            </div>\n          </div>\n        )}\n        {showInfo && (\n          <div\n            css={{\n              height: '55%',\n              width: '100%',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'space-around',\n            }}\n          >\n            <div\n              css={{\n                textAlign: 'right',\n                marginBottom: 'auto',\n                marginRight: 5,\n              }}\n            >\n              <BeltLength length={500 - offset.y} />\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","/** @jsxImportSource @emotion/react */\n\nimport { HalfContainerProps } from '../Props';\nimport { BeltGear } from './BeltGear';\nimport { BottomLeft } from './BottomLeft';\nimport { BottomRight } from './BottomRIght';\n// import { BottomOuterBelt } from './BottomOuterBelt';\n\nexport function BottomHalfBelt({\n  backgroundColors,\n  beltWidth,\n  gearWidth,\n  beltColors,\n  offset,\n  scale,\n  showInfo,\n}: HalfContainerProps) {\n  return (\n    <>\n      <div\n        css={{\n          display: 'flex',\n          flexGrow: 1,\n        }}\n      >\n        <BeltGear size={gearWidth} marginLeft={beltWidth * 2} />\n        <BeltGear size={gearWidth} marginLeft={scale - gearWidth - beltWidth * 2} />\n        <Motor\n          beltColor={beltColors[0]}\n          beltWidth={beltWidth}\n          gearColor={'black'}\n          marginLeft={-beltWidth}\n          offset={offset}\n          rotation={2.5 * (offset.y - offset.x)}\n          scale={scale}\n        />\n        <Motor\n          beltColor={beltColors[1]}\n          beltWidth={beltWidth}\n          gearColor={'black'}\n          marginLeft={scale - beltWidth * 4}\n          offset={offset}\n          rotation={2.5 * (scale - offset.x - offset.y)}\n          scale={scale}\n        />\n        <BottomLeft\n          backgroundColor={backgroundColors[2]}\n          beltColors={beltColors}\n          beltWidth={beltWidth}\n          offset={offset}\n          scale={scale}\n          showInfo={showInfo}\n        />\n        <BottomRight\n          backgroundColor={backgroundColors[3]}\n          beltColors={beltColors}\n          beltWidth={beltWidth}\n          offset={offset}\n          showInfo={showInfo}\n          scale={scale}\n        />\n      </div>\n    </>\n  );\n}\n\nfunction Motor({\n  beltColor,\n  beltWidth,\n  gearColor,\n  marginLeft,\n  offset,\n  rotation,\n  scale,\n}: Pick<HalfContainerProps, 'beltWidth' | 'offset' | 'scale'> &\n  Readonly<{ gearColor: string; beltColor: string; marginLeft: number; rotation: number }>) {\n  const motorSize = beltWidth * 5;\n  return (\n    <div\n      css={{\n        boxSizing: 'border-box',\n        paddingLeft: beltWidth,\n        paddingRight: beltWidth,\n        position: 'absolute',\n        width: motorSize,\n        height: motorSize,\n        borderRadius: '10%',\n        backgroundColor: 'grey',\n        marginLeft,\n        marginTop: scale - offset.y - motorSize * 0.75,\n      }}\n    >\n      <BeltGear color={gearColor} size={beltWidth * 3} marginTop={beltWidth} rotation={rotation}>\n        &#8593;\n      </BeltGear>\n      <div\n        css={{\n          height: motorSize / 2,\n          borderLeft: `${beltWidth}px solid ${beltColor}`,\n          borderRight: `${beltWidth}px solid ${beltColor}`,\n        }}\n      />\n    </div>\n  );\n}\n","/** @jsxImportSource @emotion/react */\nimport { ContainerProps } from '../Props';\nimport { BeltLength } from './BeltLength';\n\nexport function TopLeft({ backgroundColor, beltColors, beltWidth, offset, showInfo }: ContainerProps) {\n  return (\n    <div\n      css={{\n        boxSizing: 'border-box',\n        borderLeft: `${beltWidth}px solid ${beltColors[0]}`,\n        borderTopLeftRadius: beltWidth * 1.25,\n        height: offset.y,\n        width: offset.x,\n      }}\n    >\n      <div\n        css={{\n          position: 'absolute',\n          height: offset.y,\n          backgroundColor,\n          opacity: 0.75,\n          zIndex: -1,\n          width: offset.x - beltWidth,\n        }}\n      />\n      <div\n        css={{\n          boxSizing: 'border-box',\n          height: '100%',\n          width: '100%',\n          borderBottom: `${beltWidth}px solid ${beltColors[1]}`,\n          borderLeft: `${beltWidth}px solid ${beltColors[1]}`,\n          borderTopLeftRadius: beltWidth * 1.25,\n          borderBottomLeftRadius: beltWidth * 1.25,\n        }}\n      >\n        {showInfo && (\n          <div\n            css={{\n              height: '55%',\n              width: '100%',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'space-around',\n            }}\n          >\n            <div\n              css={{\n                marginTop: 'auto',\n                textAlign: 'left',\n                marginLeft: 5,\n              }}\n            >\n              <BeltLength length={offset.y} />\n            </div>\n          </div>\n        )}\n        {showInfo && (\n          <div\n            css={{\n              height: '45%',\n              width: '100%',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'space-around',\n            }}\n          >\n            <div\n              css={{\n                marginTop: 'auto',\n                marginBottom: 5,\n              }}\n            >\n              <BeltLength length={offset.x} />\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","/** @jsxImportSource @emotion/react */\n\nimport { ContainerProps } from '../Props';\nimport { BeltLength } from './BeltLength';\n\nexport function TopRight({ backgroundColor, beltColors, beltWidth, offset, scale, showInfo }: ContainerProps) {\n  return (\n    <div\n      css={{\n        boxSizing: 'border-box',\n        borderRight: `${beltWidth}px solid ${beltColors[1]}`,\n        borderTopRightRadius: beltWidth * 1.25,\n        height: '100%',\n        flexGrow: 1,\n      }}\n    >\n      <div\n        css={{\n          position: 'absolute',\n          height: offset.y,\n          backgroundColor,\n          opacity: 0.75,\n          zIndex: -1,\n          width: 500 - offset.x - beltWidth,\n        }}\n      />\n      <div\n        css={{\n          boxSizing: 'border-box',\n          height: '100%',\n          width: '100%',\n          borderBottom: `${beltWidth}px solid ${beltColors[0]}`,\n          borderRight: `${beltWidth}px solid ${beltColors[0]}`,\n          borderTopRightRadius: beltWidth * 1.25,\n          borderBottomRightRadius: beltWidth * 1.25,\n        }}\n      >\n        {showInfo && (\n          <div\n            css={{\n              height: '55%',\n              width: '100%',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'space-around',\n            }}\n          >\n            <div\n              css={{\n                marginTop: 'auto',\n                textAlign: 'right',\n                marginRight: 5,\n              }}\n            >\n              <BeltLength length={offset.y} />\n            </div>\n          </div>\n        )}\n        {showInfo && (\n          <div\n            css={{\n              height: '45%',\n              width: '100%',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'space-around',\n            }}\n          >\n            <div\n              css={{\n                marginTop: 'auto',\n                marginBottom: 5,\n              }}\n            >\n              <BeltLength length={scale - offset.x} />\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","/** @jsxImportSource @emotion/react */\n\nimport { HalfContainerProps } from '../Props';\nimport { BeltGear } from './BeltGear';\nimport { TopLeft } from './TopLeft';\nimport { TopRight } from './TopRight';\n\nexport function TopHalfBelt({\n  backgroundColors,\n  beltWidth,\n  gearWidth,\n  beltColors,\n  offset,\n  scale,\n  showInfo,\n}: HalfContainerProps) {\n  return (\n    <>\n      <div\n        css={{\n          position: 'absolute',\n          paddingLeft: 10,\n        }}\n      >\n        <div\n          css={{\n            marginTop: 4,\n            position: 'absolute',\n            width: scale - 20,\n            borderTop: `${beltWidth}px solid ${beltColors[0]}`,\n            transform: 'rotate(1deg)',\n          }}\n        />\n        <div\n          css={{\n            marginTop: 4,\n            position: 'absolute',\n            width: scale - 20,\n            borderTop: `${beltWidth}px solid ${beltColors[1]}`,\n            transform: 'rotate(-1deg)',\n          }}\n        />\n      </div>\n      <BeltGear size={gearWidth} />\n      <BeltGear size={gearWidth} marginLeft={scale - gearWidth} />\n      <BeltGear size={gearWidth} marginLeft={beltWidth} marginTop={offset.y - gearWidth} />\n      <BeltGear size={gearWidth} marginLeft={scale - gearWidth - beltWidth} marginTop={offset.y - gearWidth} />\n      <div\n        css={{\n          display: 'flex',\n        }}\n      >\n        <TopLeft\n          backgroundColor={backgroundColors[0]}\n          beltColors={beltColors}\n          beltWidth={beltWidth}\n          offset={offset}\n          scale={scale}\n          showInfo={showInfo}\n        />\n        <TopRight\n          backgroundColor={backgroundColors[1]}\n          beltColors={beltColors}\n          beltWidth={beltWidth}\n          offset={offset}\n          scale={scale}\n          showInfo={showInfo}\n        />\n      </div>\n    </>\n  );\n}\n","/** @jsxImportSource @emotion/react */\n\nimport { useCallback, useMemo, useState } from 'react';\nimport { ArrowButton } from './components/ArrowButton';\nimport { BottomHalfBelt } from './components/BottomHalfBelt';\nimport { TopHalfBelt } from './components/TopHalfBelt';\n\nconst scale = 500;\nconst beltWidth = 10;\nconst gearWidth = beltWidth * 2.5;\nconst rotationScale = 3;\nconst rotationLimit = 60;\nconst limit = rotationLimit * rotationScale;\nconst beltColors = ['blue', 'red'];\nconst backgroundColorsColorful = ['skyblue', 'thistle', 'peachpuff', 'lightYellow'];\nconst backgroundColorsBlank = ['none', 'none', 'none', 'none'];\n\nfunction App() {\n  const [{ leftMotorPosition, rightMotorPosition }, setMotorPositions] = useState({\n    leftMotorPosition: 0,\n    rightMotorPosition: 0,\n  });\n  const [backgroundColors, setbackgroundColors] = useState(backgroundColorsBlank);\n  const [showInfo, setShowInfo] = useState(false);\n\n  const centerPointOffset = useMemo(\n    () => ({\n      x: Math.round(scale / 2 - leftMotorPosition - rightMotorPosition),\n      y: Math.round(scale / 2 + leftMotorPosition - rightMotorPosition),\n    }),\n    [leftMotorPosition, rightMotorPosition]\n  );\n\n  const incrementRight = () => {\n    setMotors((prev) => ({\n      ...prev,\n      rightMotorPosition: prev.rightMotorPosition + rotationScale,\n    }));\n  };\n  const incrementLeft = () => {\n    setMotors((prev) => ({\n      ...prev,\n      leftMotorPosition: prev.leftMotorPosition + rotationScale,\n    }));\n  };\n  const decrementRight = () => {\n    setMotors((prev) => ({\n      ...prev,\n      rightMotorPosition: prev.rightMotorPosition - rotationScale,\n    }));\n  };\n  const decrementLeft = () => {\n    setMotors((prev) => ({\n      ...prev,\n      leftMotorPosition: prev.leftMotorPosition - rotationScale,\n    }));\n  };\n\n  const setMotors = (\n    callback: (\n      prev: Readonly<{\n        leftMotorPosition: number;\n        rightMotorPosition: number;\n      }>\n    ) => Readonly<{\n      leftMotorPosition: number;\n      rightMotorPosition: number;\n    }>\n  ) => {\n    setMotorPositions((prev) => {\n      const newVal = callback(prev);\n      return Math.abs(newVal.leftMotorPosition) + Math.abs(newVal.rightMotorPosition) <= limit ? newVal : prev;\n    });\n  };\n\n  const moveTo = useCallback(\n    (x: number, y: number) => {\n      const left = (y - x) / 2;\n      const right = (scale - x - y) / 2;\n      const roundedLeft = left - (left % rotationScale);\n      const roundedRight = right - (right % rotationScale);\n\n      const leftDiff = roundedLeft - leftMotorPosition;\n      const rightDiff = roundedRight - rightMotorPosition;\n\n      const rotationAmount = Math.max(Math.abs(leftDiff), Math.abs(rightDiff)) / rotationScale;\n      const leftMoveAmount = leftDiff / rotationAmount;\n      const rightMoveAmount = rightDiff / rotationAmount;\n      for (let i = 0; i <= rotationAmount; i++) {\n        window.setTimeout(() => {\n          setMotors((prev) => ({\n            leftMotorPosition: prev.leftMotorPosition + leftMoveAmount,\n            rightMotorPosition: prev.rightMotorPosition + rightMoveAmount,\n          }));\n          if (i === rotationAmount) {\n            setMotors((prev) => ({\n              leftMotorPosition: roundedLeft,\n              rightMotorPosition: roundedRight,\n            }));\n          }\n        }, 0);\n      }\n    },\n    [leftMotorPosition, rightMotorPosition]\n  );\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        textAlign: 'center',\n        minHeight: '95vh',\n        flexDirection: 'column',\n        backgroundColor: 'gainsboro',\n      }}\n    >\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          height: scale,\n          width: scale,\n          backgroundColor: 'white',\n          zIndex: 0,\n        }}\n        onDragOver={(e) => {\n          e.preventDefault();\n        }}\n      >\n        <div\n          css={{\n            position: 'absolute',\n            height: scale - 140,\n            width: scale - 140,\n            marginLeft: 70,\n            marginTop: 70,\n            zIndex: 2,\n            cursor: 'crosshair',\n          }}\n          onClick={(event) => {\n            const newX = event.nativeEvent.offsetX + 70;\n            const newY = event.nativeEvent.offsetY + 70;\n            moveTo(newX, newY);\n          }}\n        />\n        <div\n          css={{\n            position: 'absolute',\n            height: scale - 140,\n            width: scale - 140,\n            marginLeft: 70,\n            marginTop: 70,\n            border: '2px solid black',\n            backgroundColor: 'silver',\n            zIndex: -1,\n          }}\n        />\n        <div\n          css={{\n            position: 'absolute',\n            height: 40,\n            width: 40,\n            backgroundColor: 'black',\n            marginLeft: centerPointOffset.x - 20,\n            marginTop: centerPointOffset.y - 20,\n            cursor: 'pointer',\n            zIndex: 1,\n          }}\n        />\n        <TopHalfBelt\n          backgroundColors={backgroundColors}\n          beltWidth={beltWidth}\n          gearWidth={gearWidth}\n          beltColors={beltColors}\n          offset={centerPointOffset}\n          scale={scale}\n          showInfo={showInfo}\n        />\n        <BottomHalfBelt\n          backgroundColors={backgroundColors}\n          beltWidth={beltWidth}\n          gearWidth={gearWidth}\n          beltColors={beltColors}\n          offset={centerPointOffset}\n          scale={scale}\n          showInfo={showInfo}\n        />\n      </div>\n      <div\n        css={{\n          width: scale,\n          height: scale / 2,\n          backgroundColor: 'lightsteelblue',\n        }}\n      >\n        <div\n          css={{\n            display: 'flex',\n            justifyContent: 'space-between',\n          }}\n        >\n          <div>\n            <h2>{Math.round(leftMotorPosition * 5)}&#176;</h2>\n            <ArrowButton\n              text=\"&#10226;\"\n              onClick={() => {\n                decrementLeft();\n              }}\n            />\n            <ArrowButton\n              text=\"&#10227;\"\n              onClick={() => {\n                incrementLeft();\n              }}\n            />\n            <h4>Rotate Left Motor</h4>\n          </div>\n          <div>\n            <h3>{`x:${-(scale / 2 - centerPointOffset.x)}, y:${scale / 2 - centerPointOffset.y}`}</h3>\n            <div>\n              <ArrowButton\n                text=\"&#8598;\"\n                onClick={() => {\n                  incrementRight();\n                }}\n              />\n              <ArrowButton\n                text=\"&#8593;\"\n                onClick={() => {\n                  setMotors((prev) => ({\n                    leftMotorPosition: prev.leftMotorPosition - rotationScale,\n                    rightMotorPosition: prev.rightMotorPosition + rotationScale,\n                  }));\n                }}\n              />\n              <ArrowButton\n                text=\"&#8599;\"\n                onClick={() => {\n                  decrementLeft();\n                }}\n              />\n            </div>\n            <div>\n              <ArrowButton\n                text=\"&#8592;\"\n                onClick={() => {\n                  setMotors((prev) => ({\n                    leftMotorPosition: prev.leftMotorPosition + rotationScale,\n                    rightMotorPosition: prev.rightMotorPosition + rotationScale,\n                  }));\n                }}\n              />\n              <ArrowButton\n                text=\"reset\"\n                onClick={() => {\n                  setMotors((prev) => ({\n                    leftMotorPosition: 0,\n                    rightMotorPosition: 0,\n                  }));\n                }}\n              />\n\n              <ArrowButton\n                text=\"&#8594;\"\n                onClick={() => {\n                  setMotors((prev) => ({\n                    leftMotorPosition: prev.leftMotorPosition - rotationScale,\n                    rightMotorPosition: prev.rightMotorPosition - rotationScale,\n                  }));\n                }}\n              />\n            </div>\n            <div>\n              <ArrowButton\n                text=\"&#8601;\"\n                onClick={() => {\n                  incrementLeft();\n                }}\n              />\n              <ArrowButton\n                text=\"&#8595;\"\n                onClick={() => {\n                  setMotors((prev) => ({\n                    leftMotorPosition: prev.leftMotorPosition + rotationScale,\n                    rightMotorPosition: prev.rightMotorPosition - rotationScale,\n                  }));\n                }}\n              />\n              <ArrowButton\n                text=\"&#8600;\"\n                onClick={() => {\n                  decrementRight();\n                }}\n              />\n            </div>\n            <h4>Move Tool</h4>\n          </div>\n          <div>\n            <h2>{Math.round(rightMotorPosition * 5)}&#176;</h2>\n            <ArrowButton\n              text=\"&#10226;\"\n              onClick={() => {\n                decrementRight();\n              }}\n            />\n            <ArrowButton\n              text=\"&#10227;\"\n              onClick={() => {\n                setMotors((prev) => ({\n                  ...prev,\n                  rightMotorPosition: prev.rightMotorPosition + rotationScale,\n                }));\n              }}\n            />\n            <h4>Rotate Right Motor</h4>\n          </div>\n        </div>\n        <div>\n          <button\n            onClick={() => {\n              if (backgroundColors === backgroundColorsBlank) {\n                setbackgroundColors(backgroundColorsColorful);\n              } else {\n                setbackgroundColors(backgroundColorsBlank);\n              }\n            }}\n          >\n            Toggle Belt Quadrants\n          </button>\n          <button\n            onClick={() => {\n              setShowInfo((prev) => !prev);\n            }}\n          >\n            Toggle Belt Lengths\n          </button>\n        </div>\n        <div>\n          <p>clicking on the bed will also move the tool</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}