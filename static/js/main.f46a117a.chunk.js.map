{"version":3,"sources":["components/ArrowButton.tsx","components/BeltGear.tsx","components/BeltLength.tsx","components/BottomLeft.tsx","components/BottomRIght.tsx","components/BottomHalfBelt.tsx","components/TopLeft.tsx","components/TopRight.tsx","components/TopHalfBelt.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ArrowButton","text","onClick","css","height","width","BeltGear","children","color","marginLeft","marginTop","rotation","size","display","flexDirection","justifyContent","position","borderRadius","backgroundColor","transform","BeltLength","length","BottomLeft","beltColors","beltWidth","offset","scale","showInfo","boxSizing","x","borderLeft","paddingLeft","y","opacity","zIndex","borderTop","borderTopLeftRadius","marginBottom","textAlign","BottomRight","borderRight","flexGrow","paddingRight","borderTopRightRadius","marginRight","BottomHalfBelt","backgroundColors","gearWidth","Motor","beltColor","gearColor","motorSize","TopLeft","borderBottom","borderBottomLeftRadius","TopRight","borderBottomRightRadius","TopHalfBelt","backgroundColorsColorful","backgroundColorsBlank","App","useState","leftMotorPosition","rightMotorPosition","setMotorPositions","setbackgroundColors","setShowInfo","window","innerWidth","innerHeight","useMemo","scaledMargin","center","Math","max","centerPointOffset","round","incrementLeft","setMotors","prev","decrementRight","decrementLeft","callback","newVal","abs","rotationLimit","moveTo","useCallback","left","right","roundedLeft","roundedRight","leftDiff","rightDiff","rotationAmount","leftMoveAmount","rightMoveAmount","i","setTimeout","onDrag","offsetY","offsetX","newLeftMotorPosition","newRightMotorPosition","alignItems","minHeight","onDragOver","e","preventDefault","cursor","event","newX","nativeEvent","newY","border","draggable","onTouchMove","changedTouches","pageX","pageY","flex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactGA","initialize","pageview","location","pathname","search","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f46a117a.chunk.js","sourcesContent":["/** @jsxImportSource @emotion/react */\n\nexport function ArrowButton({\n  text,\n  onClick,\n}: Readonly<{\n  text: string;\n  onClick(): void;\n}>) {\n  return (\n    <button css={{ height: 30, width: 30 }} onClick={onClick}>\n      {text}\n    </button>\n  );\n}\n","/** @jsxImportSource @emotion/react */\n\nimport { PropsWithChildren } from 'react';\n\nexport function BeltGear({ children, color, marginLeft, marginTop, rotation, size }: PropsWithChildren<BeltGearProps>) {\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-around',\n        color: 'white',\n        position: 'absolute',\n        width: size,\n        height: size,\n        borderRadius: '50%',\n        backgroundColor: color || 'brown',\n        marginLeft,\n        marginTop,\n        transform: `rotate(${rotation}deg)`,\n      }}\n    >\n      {children}\n    </div>\n  );\n}\n\ninterface BeltGearProps\n  extends Readonly<{\n    color?: string;\n    marginLeft?: number;\n    marginTop?: number;\n    rotation?: number;\n    size: number;\n  }> {}\n","/** @jsxImportSource @emotion/react */\n\nexport function BeltLength({ length }: Readonly<{ length: number }>) {\n  return (\n    <span\n      css={{\n        backgroundColor: '#9BCA9B',\n      }}\n    >\n      {length}\n    </span>\n  );\n}\n","/** @jsxImportSource @emotion/react */\nimport { ContainerProps } from '../Props';\nimport { BeltLength } from './BeltLength';\n\nexport function BottomLeft({ backgroundColor, beltColors, beltWidth, offset, scale, showInfo }: ContainerProps) {\n  return (\n    <div\n      css={{\n        boxSizing: 'border-box',\n        height: '100%',\n        width: offset.x,\n        borderLeft: `${beltWidth}px solid ${beltColors[0]}`,\n        paddingLeft: beltWidth,\n      }}\n    >\n      <div\n        css={{\n          position: 'absolute',\n          height: scale - offset.y,\n          backgroundColor,\n          opacity: 0.75,\n          zIndex: -1,\n          marginLeft: -beltWidth,\n          width: offset.x - beltWidth,\n        }}\n      />\n      <div\n        css={{\n          boxSizing: 'border-box',\n          height: '100%',\n          width: '100%',\n          borderTop: `${beltWidth}px solid ${beltColors[0]}`,\n          borderLeft: `${beltWidth}px solid ${beltColors[0]}`,\n          borderTopLeftRadius: beltWidth * 1.25,\n        }}\n      >\n        {showInfo && (\n          <div\n            css={{\n              height: '45%',\n              width: '100%',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'space-around',\n            }}\n          >\n            <div\n              css={{\n                marginBottom: 'auto',\n                marginTop: 5,\n              }}\n            >\n              <BeltLength length={offset.x} />\n            </div>\n          </div>\n        )}\n        {showInfo && (\n          <div\n            css={{\n              height: '55%',\n              width: '100%',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'space-around',\n            }}\n          >\n            <div\n              css={{\n                textAlign: 'left',\n                marginBottom: 'auto',\n                marginLeft: 5,\n              }}\n            >\n              <BeltLength length={scale - offset.y} />\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","/** @jsxImportSource @emotion/react */\nimport { ContainerProps } from '../Props';\nimport { BeltLength } from './BeltLength';\n\nexport function BottomRight({ backgroundColor, beltColors, beltWidth, offset, scale, showInfo }: ContainerProps) {\n  return (\n    <div\n      css={{\n        boxSizing: 'border-box',\n        height: '100%',\n        borderRight: `${beltWidth}px solid ${beltColors[1]}`,\n        flexGrow: 1,\n        paddingRight: beltWidth,\n      }}\n    >\n      <div\n        css={{\n          position: 'absolute',\n          height: scale - offset.y,\n          backgroundColor,\n          opacity: 0.75,\n          zIndex: -1,\n          width: scale - offset.x - beltWidth,\n        }}\n      />\n      <div\n        css={{\n          boxSizing: 'border-box',\n          height: '100%',\n          width: '100%',\n          borderTop: `${beltWidth}px solid ${beltColors[1]}`,\n          borderRight: `${beltWidth}px solid ${beltColors[1]}`,\n          borderTopRightRadius: beltWidth * 1.25,\n        }}\n      >\n        {showInfo && (\n          <div\n            css={{\n              height: '45%',\n              width: '100%',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'space-around',\n            }}\n          >\n            <div\n              css={{\n                marginBottom: 'auto',\n                marginTop: 5,\n              }}\n            >\n              <BeltLength length={scale - offset.x} />\n            </div>\n          </div>\n        )}\n        {showInfo && (\n          <div\n            css={{\n              height: '55%',\n              width: '100%',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'space-around',\n            }}\n          >\n            <div\n              css={{\n                textAlign: 'right',\n                marginBottom: 'auto',\n                marginRight: 5,\n              }}\n            >\n              <BeltLength length={500 - offset.y} />\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","/** @jsxImportSource @emotion/react */\n\nimport { HalfContainerProps } from '../Props';\nimport { BeltGear } from './BeltGear';\nimport { BottomLeft } from './BottomLeft';\nimport { BottomRight } from './BottomRIght';\n// import { BottomOuterBelt } from './BottomOuterBelt';\n\nexport function BottomHalfBelt({\n  backgroundColors,\n  beltWidth,\n  gearWidth,\n  beltColors,\n  offset,\n  scale,\n  showInfo,\n}: HalfContainerProps) {\n  return (\n    <>\n      <div\n        css={{\n          display: 'flex',\n          flexGrow: 1,\n        }}\n      >\n        <BeltGear size={gearWidth} marginLeft={beltWidth * 2} />\n        <BeltGear size={gearWidth} marginLeft={scale - gearWidth - beltWidth * 2} />\n        <Motor\n          beltColor={beltColors[0]}\n          beltWidth={beltWidth}\n          gearColor={'black'}\n          marginLeft={-beltWidth}\n          offset={offset}\n          rotation={2.5 * (offset.y - offset.x)}\n          scale={scale}\n        />\n        <Motor\n          beltColor={beltColors[1]}\n          beltWidth={beltWidth}\n          gearColor={'black'}\n          marginLeft={scale - beltWidth * 4}\n          offset={offset}\n          rotation={2.5 * (scale - offset.x - offset.y)}\n          scale={scale}\n        />\n        <BottomLeft\n          backgroundColor={backgroundColors[2]}\n          beltColors={beltColors}\n          beltWidth={beltWidth}\n          offset={offset}\n          scale={scale}\n          showInfo={showInfo}\n        />\n        <BottomRight\n          backgroundColor={backgroundColors[3]}\n          beltColors={beltColors}\n          beltWidth={beltWidth}\n          offset={offset}\n          showInfo={showInfo}\n          scale={scale}\n        />\n      </div>\n    </>\n  );\n}\n\nfunction Motor({\n  beltColor,\n  beltWidth,\n  gearColor,\n  marginLeft,\n  offset,\n  rotation,\n  scale,\n}: Pick<HalfContainerProps, 'beltWidth' | 'offset' | 'scale'> &\n  Readonly<{ gearColor: string; beltColor: string; marginLeft: number; rotation: number }>) {\n  const motorSize = beltWidth * 5;\n  return (\n    <div\n      css={{\n        boxSizing: 'border-box',\n        paddingLeft: beltWidth,\n        paddingRight: beltWidth,\n        position: 'absolute',\n        width: motorSize,\n        height: motorSize,\n        borderRadius: '10%',\n        backgroundColor: 'grey',\n        marginLeft,\n        marginTop: scale - offset.y - motorSize * 0.75,\n      }}\n    >\n      <BeltGear color={gearColor} size={beltWidth * 3} marginTop={beltWidth} rotation={rotation}>\n        &#8593;\n      </BeltGear>\n      <div\n        css={{\n          height: motorSize / 2,\n          borderLeft: `${beltWidth}px solid ${beltColor}`,\n          borderRight: `${beltWidth}px solid ${beltColor}`,\n        }}\n      />\n    </div>\n  );\n}\n","/** @jsxImportSource @emotion/react */\nimport { ContainerProps } from '../Props';\nimport { BeltLength } from './BeltLength';\n\nexport function TopLeft({ backgroundColor, beltColors, beltWidth, offset, showInfo }: ContainerProps) {\n  return (\n    <div\n      css={{\n        boxSizing: 'border-box',\n        borderLeft: `${beltWidth}px solid ${beltColors[0]}`,\n        borderTopLeftRadius: beltWidth * 1.25,\n        height: offset.y,\n        width: offset.x,\n      }}\n    >\n      <div\n        css={{\n          position: 'absolute',\n          height: offset.y,\n          backgroundColor,\n          opacity: 0.75,\n          zIndex: -1,\n          width: offset.x - beltWidth,\n        }}\n      />\n      <div\n        css={{\n          boxSizing: 'border-box',\n          height: '100%',\n          width: '100%',\n          borderBottom: `${beltWidth}px solid ${beltColors[1]}`,\n          borderLeft: `${beltWidth}px solid ${beltColors[1]}`,\n          borderTopLeftRadius: beltWidth * 1.25,\n          borderBottomLeftRadius: beltWidth * 1.25,\n        }}\n      >\n        {showInfo && (\n          <div\n            css={{\n              height: '55%',\n              width: '100%',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'space-around',\n            }}\n          >\n            <div\n              css={{\n                marginTop: 'auto',\n                textAlign: 'left',\n                marginLeft: 5,\n              }}\n            >\n              <BeltLength length={offset.y} />\n            </div>\n          </div>\n        )}\n        {showInfo && (\n          <div\n            css={{\n              height: '45%',\n              width: '100%',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'space-around',\n            }}\n          >\n            <div\n              css={{\n                marginTop: 'auto',\n                marginBottom: 5,\n              }}\n            >\n              <BeltLength length={offset.x} />\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","/** @jsxImportSource @emotion/react */\n\nimport { ContainerProps } from '../Props';\nimport { BeltLength } from './BeltLength';\n\nexport function TopRight({ backgroundColor, beltColors, beltWidth, offset, scale, showInfo }: ContainerProps) {\n  return (\n    <div\n      css={{\n        boxSizing: 'border-box',\n        borderRight: `${beltWidth}px solid ${beltColors[1]}`,\n        borderTopRightRadius: beltWidth * 1.25,\n        height: '100%',\n        flexGrow: 1,\n      }}\n    >\n      <div\n        css={{\n          position: 'absolute',\n          height: offset.y,\n          backgroundColor,\n          opacity: 0.75,\n          zIndex: -1,\n          width: scale - offset.x - beltWidth,\n        }}\n      />\n      <div\n        css={{\n          boxSizing: 'border-box',\n          height: '100%',\n          width: '100%',\n          borderBottom: `${beltWidth}px solid ${beltColors[0]}`,\n          borderRight: `${beltWidth}px solid ${beltColors[0]}`,\n          borderTopRightRadius: beltWidth * 1.25,\n          borderBottomRightRadius: beltWidth * 1.25,\n        }}\n      >\n        {showInfo && (\n          <div\n            css={{\n              height: '55%',\n              width: '100%',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'space-around',\n            }}\n          >\n            <div\n              css={{\n                marginTop: 'auto',\n                textAlign: 'right',\n                marginRight: 5,\n              }}\n            >\n              <BeltLength length={offset.y} />\n            </div>\n          </div>\n        )}\n        {showInfo && (\n          <div\n            css={{\n              height: '45%',\n              width: '100%',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'space-around',\n            }}\n          >\n            <div\n              css={{\n                marginTop: 'auto',\n                marginBottom: 5,\n              }}\n            >\n              <BeltLength length={scale - offset.x} />\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","/** @jsxImportSource @emotion/react */\n\nimport { HalfContainerProps } from '../Props';\nimport { BeltGear } from './BeltGear';\nimport { TopLeft } from './TopLeft';\nimport { TopRight } from './TopRight';\n\nexport function TopHalfBelt({\n  backgroundColors,\n  beltWidth,\n  gearWidth,\n  beltColors,\n  offset,\n  scale,\n  showInfo,\n}: HalfContainerProps) {\n  return (\n    <>\n      <div\n        css={{\n          position: 'absolute',\n          paddingLeft: 10,\n        }}\n      >\n        <div\n          css={{\n            marginTop: 4,\n            position: 'absolute',\n            width: scale - 20,\n            borderTop: `${beltWidth}px solid ${beltColors[0]}`,\n            transform: 'rotate(1deg)',\n          }}\n        />\n        <div\n          css={{\n            marginTop: 4,\n            position: 'absolute',\n            width: scale - 20,\n            borderTop: `${beltWidth}px solid ${beltColors[1]}`,\n            transform: 'rotate(-1deg)',\n          }}\n        />\n      </div>\n      <BeltGear size={gearWidth} />\n      <BeltGear size={gearWidth} marginLeft={scale - gearWidth} />\n      <BeltGear size={gearWidth} marginLeft={beltWidth} marginTop={offset.y - gearWidth} />\n      <BeltGear size={gearWidth} marginLeft={scale - gearWidth - beltWidth} marginTop={offset.y - gearWidth} />\n      <div\n        css={{\n          display: 'flex',\n        }}\n      >\n        <TopLeft\n          backgroundColor={backgroundColors[0]}\n          beltColors={beltColors}\n          beltWidth={beltWidth}\n          offset={offset}\n          scale={scale}\n          showInfo={showInfo}\n        />\n        <TopRight\n          backgroundColor={backgroundColors[1]}\n          beltColors={beltColors}\n          beltWidth={beltWidth}\n          offset={offset}\n          scale={scale}\n          showInfo={showInfo}\n        />\n      </div>\n    </>\n  );\n}\n","/** @jsxImportSource @emotion/react */\n\nimport { useCallback, useMemo, useState } from 'react';\nimport { ArrowButton } from './components/ArrowButton';\nimport { BottomHalfBelt } from './components/BottomHalfBelt';\nimport { TopHalfBelt } from './components/TopHalfBelt';\n\nconst beltWidth = 10;\nconst gearWidth = beltWidth * 2.5;\nconst rotationScale = 3;\nconst rotationLimit = 60;\nconst limit = rotationLimit * rotationScale;\nconst beltColors = ['#0072B2', '#F0E442'];\nconst backgroundColorsColorful = ['#CC79A7', '#56B4E9', '#D55E00', '#009E73'];\nconst backgroundColorsBlank = ['none', 'none', 'none', 'none'];\n\nfunction App() {\n  const [{ leftMotorPosition, rightMotorPosition }, setMotorPositions] = useState({\n    leftMotorPosition: 0,\n    rightMotorPosition: 0,\n  });\n  const [backgroundColors, setbackgroundColors] = useState(backgroundColorsBlank);\n  const [showInfo, setShowInfo] = useState(false);\n  const { innerWidth, innerHeight } = window;\n\n  const scale = useMemo(() => (innerWidth > 550 ? 500 : innerWidth > 450 ? 400 : 350), [innerWidth]);\n  const scaledMargin = scale * 0.14;\n\n  const center = useMemo(\n    () => ({\n      x: innerWidth / 2,\n      y: Math.max(innerHeight * 0.95, scale * 2) / 2 - scale / 2,\n    }),\n    [scale, innerWidth, innerHeight]\n  );\n\n  const centerPointOffset = useMemo(\n    () => ({\n      x: Math.round(scale / 2 - leftMotorPosition - rightMotorPosition),\n      y: Math.round(scale / 2 + leftMotorPosition - rightMotorPosition),\n    }),\n    [scale, leftMotorPosition, rightMotorPosition]\n  );\n\n  const incrementRight = () => {\n    setMotors((prev) => ({\n      ...prev,\n      rightMotorPosition: prev.rightMotorPosition + rotationScale,\n    }));\n  };\n  const incrementLeft = () => {\n    setMotors((prev) => ({\n      ...prev,\n      leftMotorPosition: prev.leftMotorPosition + rotationScale,\n    }));\n  };\n  const decrementRight = () => {\n    setMotors((prev) => ({\n      ...prev,\n      rightMotorPosition: prev.rightMotorPosition - rotationScale,\n    }));\n  };\n  const decrementLeft = () => {\n    setMotors((prev) => ({\n      ...prev,\n      leftMotorPosition: prev.leftMotorPosition - rotationScale,\n    }));\n  };\n\n  const setMotors = (\n    callback: (\n      prev: Readonly<{\n        leftMotorPosition: number;\n        rightMotorPosition: number;\n      }>\n    ) => Readonly<{\n      leftMotorPosition: number;\n      rightMotorPosition: number;\n    }>\n  ) => {\n    setMotorPositions((prev) => {\n      const newVal = callback(prev);\n      return Math.abs(newVal.leftMotorPosition) + Math.abs(newVal.rightMotorPosition) <= limit ? newVal : prev;\n    });\n  };\n\n  const moveTo = useCallback(\n    (x: number, y: number) => {\n      const left = (y - x) / 2;\n      const right = (scale - x - y) / 2;\n      const roundedLeft = left - (left % rotationScale);\n      const roundedRight = right - (right % rotationScale);\n\n      const leftDiff = roundedLeft - leftMotorPosition;\n      const rightDiff = roundedRight - rightMotorPosition;\n\n      const rotationAmount = Math.max(Math.abs(leftDiff), Math.abs(rightDiff)) / rotationScale;\n      const leftMoveAmount = leftDiff / rotationAmount;\n      const rightMoveAmount = rightDiff / rotationAmount;\n      for (let i = 0; i <= rotationAmount; i++) {\n        window.setTimeout(() => {\n          setMotors((prev) => ({\n            leftMotorPosition: prev.leftMotorPosition + leftMoveAmount,\n            rightMotorPosition: prev.rightMotorPosition + rightMoveAmount,\n          }));\n          if (i === rotationAmount) {\n            setMotors((prev) => ({\n              leftMotorPosition: roundedLeft,\n              rightMotorPosition: roundedRight,\n            }));\n          }\n        }, 0);\n      }\n    },\n    [scale, leftMotorPosition, rightMotorPosition]\n  );\n  const onDrag = useCallback(\n    (x: number, y: number) => {\n      if (x && y) {\n        const offsetY = y - center.y + scale / 2;\n        const offsetX = x - center.x + scale / 2;\n        const newLeftMotorPosition = (offsetY - offsetX) / 2;\n        const newRightMotorPosition = (scale - offsetX - offsetY) / 2;\n\n        setMotors((prev) => ({\n          leftMotorPosition:\n            newLeftMotorPosition >= prev.leftMotorPosition + rotationScale ||\n            newLeftMotorPosition <= prev.leftMotorPosition - rotationScale\n              ? newLeftMotorPosition - (newLeftMotorPosition % rotationScale)\n              : prev.leftMotorPosition,\n          rightMotorPosition:\n            newRightMotorPosition >= prev.rightMotorPosition + rotationScale ||\n            newRightMotorPosition <= prev.rightMotorPosition - rotationScale\n              ? newRightMotorPosition - (newRightMotorPosition % rotationScale)\n              : prev.rightMotorPosition,\n        }));\n      }\n    },\n    [center.x, center.y, scale]\n  );\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        textAlign: 'center',\n        minHeight: '95vh',\n        flexDirection: 'column',\n        backgroundColor: 'gainsboro',\n      }}\n    >\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          height: scale,\n          width: scale,\n          backgroundColor: 'white',\n          borderRadius: gearWidth / 2,\n          zIndex: 0,\n        }}\n        onDragOver={(e) => {\n          e.preventDefault();\n        }}\n      >\n        <div\n          css={{\n            position: 'absolute',\n            height: scale - scaledMargin * 2,\n            width: scale - scaledMargin * 2,\n            marginLeft: scaledMargin,\n            marginTop: scaledMargin,\n            zIndex: 2,\n            cursor: 'crosshair',\n          }}\n          onClick={(event) => {\n            const newX = event.nativeEvent.offsetX + scaledMargin;\n            const newY = event.nativeEvent.offsetY + scaledMargin;\n            moveTo(newX, newY);\n          }}\n        />\n        <div\n          css={{\n            position: 'absolute',\n            height: scale - scaledMargin * 2,\n            width: scale - scaledMargin * 2,\n            marginLeft: scaledMargin,\n            marginTop: scaledMargin,\n            border: '2px solid black',\n            backgroundColor: 'silver',\n            zIndex: -1,\n          }}\n        />\n        <div\n          draggable=\"true\"\n          onTouchMove={({ changedTouches }) => {\n            const { pageX, pageY } = changedTouches[0];\n            onDrag(pageX, pageY);\n          }}\n          onDrag={(e) => {\n            const { pageX, pageY } = e;\n            onDrag(pageX, pageY);\n          }}\n          css={{\n            position: 'absolute',\n            height: 40,\n            width: 40,\n            backgroundColor: 'black',\n            marginLeft: centerPointOffset.x - 20,\n            marginTop: centerPointOffset.y - 20,\n            cursor: 'pointer',\n            zIndex: 3,\n          }}\n        />\n        <TopHalfBelt\n          backgroundColors={backgroundColors}\n          beltWidth={beltWidth}\n          gearWidth={gearWidth}\n          beltColors={beltColors}\n          offset={centerPointOffset}\n          scale={scale}\n          showInfo={showInfo}\n        />\n        <BottomHalfBelt\n          backgroundColors={backgroundColors}\n          beltWidth={beltWidth}\n          gearWidth={gearWidth}\n          beltColors={beltColors}\n          offset={centerPointOffset}\n          scale={scale}\n          showInfo={showInfo}\n        />\n      </div>\n      <div\n        css={{\n          width: scale,\n          height: scale,\n          backgroundColor: 'lightsteelblue',\n        }}\n      >\n        <div\n          css={{\n            display: 'flex',\n          }}\n        >\n          <div\n            css={{\n              flex: '1 1 0px',\n            }}\n          >\n            <h2>{Math.round(leftMotorPosition * 5)}&#176;</h2>\n            <ArrowButton\n              text=\"&#10226;\"\n              onClick={() => {\n                decrementLeft();\n              }}\n            />\n            <ArrowButton\n              text=\"&#10227;\"\n              onClick={() => {\n                incrementLeft();\n              }}\n            />\n            <h4>Rotate Left Motor</h4>\n          </div>\n          <div\n            css={{\n              flex: '1 1 0px',\n            }}\n          >\n            <h3>{`x:${-(scale / 2 - centerPointOffset.x)}, y:${scale / 2 - centerPointOffset.y}`}</h3>\n            <div>\n              <ArrowButton\n                text=\"&#8598;\"\n                onClick={() => {\n                  incrementRight();\n                }}\n              />\n              <ArrowButton\n                text=\"&#8593;\"\n                onClick={() => {\n                  setMotors((prev) => ({\n                    leftMotorPosition: prev.leftMotorPosition - rotationScale,\n                    rightMotorPosition: prev.rightMotorPosition + rotationScale,\n                  }));\n                }}\n              />\n              <ArrowButton\n                text=\"&#8599;\"\n                onClick={() => {\n                  decrementLeft();\n                }}\n              />\n            </div>\n            <div>\n              <ArrowButton\n                text=\"&#8592;\"\n                onClick={() => {\n                  setMotors((prev) => ({\n                    leftMotorPosition: prev.leftMotorPosition + rotationScale,\n                    rightMotorPosition: prev.rightMotorPosition + rotationScale,\n                  }));\n                }}\n              />\n              <ArrowButton\n                text=\"&#8226;\"\n                onClick={() => {\n                  setMotors((prev) => ({\n                    leftMotorPosition: 0,\n                    rightMotorPosition: 0,\n                  }));\n                }}\n              />\n\n              <ArrowButton\n                text=\"&#8594;\"\n                onClick={() => {\n                  setMotors((prev) => ({\n                    leftMotorPosition: prev.leftMotorPosition - rotationScale,\n                    rightMotorPosition: prev.rightMotorPosition - rotationScale,\n                  }));\n                }}\n              />\n            </div>\n            <div>\n              <ArrowButton\n                text=\"&#8601;\"\n                onClick={() => {\n                  incrementLeft();\n                }}\n              />\n              <ArrowButton\n                text=\"&#8595;\"\n                onClick={() => {\n                  setMotors((prev) => ({\n                    leftMotorPosition: prev.leftMotorPosition + rotationScale,\n                    rightMotorPosition: prev.rightMotorPosition - rotationScale,\n                  }));\n                }}\n              />\n              <ArrowButton\n                text=\"&#8600;\"\n                onClick={() => {\n                  decrementRight();\n                }}\n              />\n            </div>\n            <h4>Move Tool</h4>\n          </div>\n          <div\n            css={{\n              flex: '1 1 0px',\n            }}\n          >\n            <h2>{Math.round(rightMotorPosition * 5)}&#176;</h2>\n            <ArrowButton\n              text=\"&#10226;\"\n              onClick={() => {\n                decrementRight();\n              }}\n            />\n            <ArrowButton\n              text=\"&#10227;\"\n              onClick={() => {\n                setMotors((prev) => ({\n                  ...prev,\n                  rightMotorPosition: prev.rightMotorPosition + rotationScale,\n                }));\n              }}\n            />\n            <h4>Rotate Right Motor</h4>\n          </div>\n        </div>\n        <div>\n          <p\n            css={{\n              marginTop: 0,\n            }}\n          >\n            Move the tool using the buttons above, clicking on the bed, or dragging it.\n          </p>\n          <p>Use the buttons below to help visualize how the belts are moving.</p>\n        </div>\n        <div>\n          <button\n            onClick={() => {\n              if (backgroundColors === backgroundColorsBlank) {\n                setbackgroundColors(backgroundColorsColorful);\n              } else {\n                setbackgroundColors(backgroundColorsBlank);\n              }\n            }}\n          >\n            {backgroundColors === backgroundColorsBlank ? 'Show' : 'Hide'} Belt Quadrants\n          </button>\n          <button\n            onClick={() => {\n              setShowInfo((prev) => !prev);\n            }}\n          >\n            {showInfo ? 'Hide' : 'Show'} Belt Lengths\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport ReactGA from 'react-ga';\n\nReactGA.initialize('UA-91376489-2');\nReactGA.pageview(window.location.pathname + window.location.search);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}